@page "/"
@inject CosmosClient client
@using System.Text

<pre class="bg-light text-dark fw-light font-monospace mt-5 p-2">
    @_console.ToString()
</pre>

<footer class="fixed-bottom bg-secondary bg-body-secondary border">
    <small class="px-5 fw-light fst-italic">
        <strong>
            ENDPOINT:
        </strong>
        @client.Endpoint
    </small>
</footer>


@code {
    private StringBuilder _console = new();

    private bool _runAgainEnabled = false;

    protected override void OnInitialized() => GenerateQueryDataAsync();

    private async void GenerateQueryDataAsync()
    {

        await WriteToConsoleAync("Current Status:\tStarting...");

        // <get_database>
        Database database = client.GetDatabase("VoC");
        // </get_database>
        database = await database.ReadAsync();
        await WriteToConsoleAync($"Get database:\t{database.Id}");

        // <get_container>
        Container container = database.GetContainer("topics");
        // </get_container>
        container = await container.ReadContainerAsync();   
        await WriteToConsoleAync($"Get container:\t{container.Id}");

        { 
            // <query_items>
            var query = new QueryDefinition(
                query: "SELECT * FROM topics t"
            );

            using FeedIterator<Topic> feed = container.GetItemQueryIterator<Topic>(
                queryDefinition: query
            );
            // </query_items>
            await WriteToConsoleAync($"Ran query:\t{query.QueryText}");

            // <parse_results>
            List<Topic> items = new();
            while (feed.HasMoreResults)
            {
                FeedResponse<Topic> response = await feed.ReadNextAsync();
                foreach (Topic item in response)
                {
                    items.Add(item);
                }
            }
            // </parse_results>
 
            foreach(var item in items)
            {
                await WriteToConsoleAync($"Found item:\t{item.Name}\t[{item.Name}]");
            }
        }

        await WriteToConsoleAync("Current Status:\tStopping...");

        async Task WriteToConsoleAync(string message)
        {
            _console.AppendLine(message);
            await InvokeAsync(StateHasChanged);
            await Task.Delay(TimeSpan.FromSeconds(0.01));
        }
    }
}
